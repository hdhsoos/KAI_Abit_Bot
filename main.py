from api import api_token  # –¢–æ–∫–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
from keyboards import *  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
import asyncio
import logging
import json

bot = Bot(token=api_token)  # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –ø—É–Ω–∫—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å aiogram
dp = Dispatcher()
logging.basicConfig(level=logging.INFO, filename="py_log.log", filemode="a")  # logging
with open('users.json', 'r') as fh:
    USERS = json.load(fh)  # –ó–¥–µ—Å—å –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    # {id: [type]}

@dp.message(Command("start"))  # –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç
async def send_welcome(message: types.Message):
    if str(message.from_user.id) not in USERS:  # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ä—Ç
        USERS[str(message.from_user.id)] = ['']  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, [type]
        with open('users.json', 'w') as fp:
            json.dump(USERS, fp)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ json
        await message.answer(
            '–ü—Ä–∏–≤–µ—Ç, {}. –Ø –±–æ—Ç –ö–ù–ò–¢–£-–ö–ê–ò, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤ 2024 –≥–æ–¥—É.'.format(
                message.from_user.first_name))
        await message.answer("–í—ã–±–µ—Ä–∏ –∫—Ç–æ —Ç—ã –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –≤–Ω–∏–∑—É.",
                             reply_markup=first_qu.as_markup(resize_keyboard=True))
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —Å—Ç–∞—Ä—Ç
        await message.answer('–ú—ã —É–∂–µ –∑–¥–æ—Ä–æ–≤–∞–ª–∏—Å—å! –í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µ.',
                             reply_markup=universal.as_markup(resize_keyboard=True))


for el in ["üìö –ó–∞–∫–∞–Ω—á–∏–≤–∞—é —à–∫–æ–ª—É", "üë©‚Äçüéì –•–æ—á—É –≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É", "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –Ø —Ä–æ–¥–∏—Ç–µ–ª—å", "üôä –ù–µ —Ö–æ—á—É –æ—Ç–≤–µ—á–∞—Ç—å"]:
    # –ü–æ–∫–∞ —á—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –≤—ã–±–æ—Ä
    @dp.message(F.text == el)
    async def schoolkid(message: types.Message):
        USERS[str(message.from_user.id)] = [el]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–µ–º —Å–µ–±—è –Ω–∞–∑–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
        with open('users.json', 'w') as fp:
            json.dump(USERS, fp)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ json
        await message.answer("–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –í—ã–±–µ—Ä–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª.",
                             reply_markup=universal.as_markup(resize_keyboard=True))

for el in ["üëã –û –Ω–∞—Å", "üìã –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "üåü –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"]:
    # –ü–æ–∫–∞ —á—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –≤—ã–±–æ—Ä
    @dp.message(F.text == el)
    async def about_us(message: types.Message):
        await message.answer("–ë–æ—Ç –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è. –ò–∑–≤–∏–Ω–∏.",
                             reply_markup=universal.as_markup(resize_keyboard=True))


@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")  # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
async def askme(message: types.Message):
    await message.answer('–ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–∞–ø–∏—à–∏ @abit_kai_help_bot, –Ω–∞—à–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã —Ç–µ–±–µ –ø–æ–º–æ–≥—É—Ç!')


"""@dp.message(F.text == "‚ùå –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")  # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
async def cancel(message: types.Message):
    USERS[str(message.from_user.id)] = [USERS[str(message.from_user.id)][0],
                                        False]  # –û–ø—É—Å–∫–∞–µ–º —Ñ–ª–∞–≥ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–¥–∞–Ω –≤–æ–ø—Ä–æ—Å
    with open('users.json', 'w') as fp:
        json.dump(USERS, fp)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ json
    await message.answer("–•–æ—Ä–æ—à–æ, –≤–µ—Ä–Ω—ë–º—Å—è –≤ –º–µ–Ω—é.",
                         reply_markup=universal.as_markup(resize_keyboard=True))"""


@dp.message(F.text)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def new_text(message: types.Message):
    await message.answer('–Ø –Ω–µ –ø–æ–Ω—è–ª, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å. –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.',
                         reply_markup=universal.as_markup(resize_keyboard=True))


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
